name: MetricFlow Project Board Automation
description: Automated project board management for ARTIST methodology workflow

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]
  pull_request_review:
    types: [submitted]
  schedule:
    # Daily board maintenance at 9 AM UTC
    - cron: '0 9 * * 1-5'
  workflow_dispatch:
    inputs:
      action:
        description: 'Manual action to perform'
        required: true
        type: choice
        options:
          - sync_all_issues
          - update_sprint_progress
          - generate_reports
          - cleanup_board

env:
  PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Issue Management Automation
  manage_issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    name: Manage Issue Lifecycle
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Add new issue to project
        if: github.event.action == 'opened'
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/${{ github.repository_owner }}/projects/${{ env.PROJECT_NUMBER }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-assign epic and initial fields
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            
            let epic = '';
            let labels = [];
            let complexity = 'Medium';
            let priority = 'P2';
            
            // Auto-assign epic based on title/content
            if (title.includes('auth') || title.includes('user') || title.includes('login')) {
              epic = 'Authentication & User Management';
              labels.push('authentication');
            } else if (title.includes('stripe') || title.includes('paypal') || title.includes('payment') || title.includes('integration')) {
              epic = 'Data Integration & Processing';
              labels.push('integration');
            } else if (title.includes('analytics') || title.includes('metrics') || title.includes('mrr') || title.includes('churn')) {
              epic = 'Analytics Engine & Calculations';
              labels.push('analytics');
            } else if (title.includes('dashboard') || title.includes('chart') || title.includes('ui') || title.includes('frontend')) {
              epic = 'Dashboard & Visualization';
              labels.push('frontend');
            } else if (title.includes('deploy') || title.includes('monitoring') || title.includes('devops') || title.includes('infrastructure')) {
              epic = 'Deployment & Operations';
              labels.push('devops');
            }
            
            // Auto-assign complexity based on keywords
            if (title.includes('setup') || title.includes('configuration') || title.includes('basic')) {
              complexity = 'Low';
            } else if (title.includes('complex') || title.includes('advanced') || title.includes('integration')) {
              complexity = 'High';
            }
            
            // Auto-assign priority based on keywords
            if (title.includes('critical') || title.includes('urgent') || title.includes('blocker')) {
              priority = 'P0';
            } else if (title.includes('important') || title.includes('high')) {
              priority = 'P1';
            } else if (title.includes('nice') || title.includes('enhancement')) {
              priority = 'P3';
            }
            
            // Add backlog label
            labels.push('backlog');
            labels.push(complexity.toLowerCase());
            labels.push(priority.toLowerCase());
            
            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }
            
            // Add comment with auto-assigned information
            const comment = `🤖 **Auto-Assignment Complete**
            
            **Epic**: ${epic || 'Not determined - please assign manually'}
            **Complexity**: ${complexity}
            **Priority**: ${priority}
            **Status**: Added to Backlog
            
            This issue has been automatically categorized. Please review and adjust if needed.
            
            Next steps:
            1. Review and refine acceptance criteria
            2. Assign to appropriate sprint
            3. Estimate story points
            4. Move to Analysis when ready`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
      
      - name: Handle issue assignment
        if: github.event.action == 'assigned'
        uses: actions/github-script@v7
        with:
          script: |
            // Move issue to "In Progress" when assigned
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const hasSprintLabel = labels.data.some(label => label.name.startsWith('sprint-'));
            const hasMilestone = context.payload.issue.milestone !== null;
            
            if (hasSprintLabel && hasMilestone) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['in-progress']
              });
              
              // Remove sprint-ready label if present
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: 'sprint-ready'
                });
              } catch (error) {
                // Label might not exist, ignore error
              }
            }
      
      - name: Handle issue closure
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            // Add done label and remove active labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['done']
            });
            
            // Remove active workflow labels
            const labelsToRemove = ['in-progress', 'needs-review', 'qa-needed', 'deploy-ready'];
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (error) {
                // Label might not exist, ignore error
              }
            }
  
  # Pull Request Management Automation
  manage_pull_requests:
    if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
    runs-on: ubuntu-latest
    name: Manage PR Lifecycle
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Handle PR creation
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Find linked issues from PR body
            const issueNumbers = [];
            const patterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi,
              /(?:related to|ref|refs|references)\s+#(\d+)/gi
            ];
            
            for (const pattern of patterns) {
              let match;
              while ((match = pattern.exec(pr.body || '')) !== null) {
                issueNumbers.push(parseInt(match[1]));
              }
            }
            
            // Update linked issues
            for (const issueNumber of issueNumbers) {
              try {
                // Add code review label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['needs-review']
                });
                
                // Remove in-progress label
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: 'in-progress'
                  });
                } catch (error) {
                  // Label might not exist, ignore error
                }
                
                // Add comment to issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `🔄 **Status Update**: Pull request created for this issue\n\n**PR**: #${pr.number} - ${pr.title}\n\n**Next steps**: Code review needed`
                });
              } catch (error) {
                console.log(`Error updating issue #${issueNumber}:`, error.message);
              }
            }
      
      - name: Handle PR approval
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Find linked issues
            const issueNumbers = [];
            const patterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi
            ];
            
            for (const pattern of patterns) {
              let match;
              while ((match = pattern.exec(pr.body || '')) !== null) {
                issueNumbers.push(parseInt(match[1]));
              }
            }
            
            // Update linked issues to testing
            for (const issueNumber of issueNumbers) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: ['qa-needed']
                });
                
                // Remove needs-review label
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: 'needs-review'
                  });
                } catch (error) {
                  // Label might not exist, ignore error
                }
              } catch (error) {
                console.log(`Error updating issue #${issueNumber}:`, error.message);
              }
            }
      
      - name: Handle PR merge
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const targetBranch = pr.base.ref;
            
            // Find linked issues
            const issueNumbers = [];
            const patterns = [
              /(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi
            ];
            
            for (const pattern of patterns) {
              let match;
              while ((match = pattern.exec(pr.body || '')) !== null) {
                issueNumbers.push(parseInt(match[1]));
              }
            }
            
            // Update linked issues based on target branch
            for (const issueNumber of issueNumbers) {
              try {
                if (targetBranch === 'main' || targetBranch === 'master') {
                  // Merged to main - ready for deployment
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: ['deploy-ready']
                  });
                  
                  // Remove qa-needed label
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      name: 'qa-needed'
                    });
                  } catch (error) {
                    // Label might not exist, ignore error
                  }
                } else {
                  // Merged to feature branch - still in development
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    labels: ['in-progress']
                  });
                }
              } catch (error) {
                console.log(`Error updating issue #${issueNumber}:`, error.message);
              }
            }
  
  # Daily Maintenance and Reporting
  daily_maintenance:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync_all_issues')
    runs-on: ubuntu-latest
    name: Daily Board Maintenance
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Sync all issues with project board
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open issues
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} issues to process`);
            
            let statsUpdated = 0;
            let statsStale = 0;
            let statsBlocked = 0;
            
            for (const issue of issues) {
              if (issue.pull_request) continue; // Skip PRs
              
              const labels = issue.labels.map(l => l.name);
              const daysSinceUpdate = Math.floor((Date.now() - new Date(issue.updated_at)) / (1000 * 60 * 60 * 24));
              
              // Check for stale issues
              if (daysSinceUpdate > 7 && !labels.includes('done') && !labels.includes('stale')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
                statsStale++;
              }
              
              // Check for blocked issues
              if (labels.includes('blocked') && !labels.includes('escalated')) {
                if (daysSinceUpdate > 3) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: ['escalated']
                  });
                  statsBlocked++;
                }
              }
              
              statsUpdated++;
            }
            
            // Create daily summary comment
            const summaryBody = `📊 **Daily Board Maintenance Summary**
            
            **Date**: ${new Date().toISOString().split('T')[0]}
            **Issues Processed**: ${statsUpdated}
            **Stale Issues Identified**: ${statsStale}
            **Blocked Issues Escalated**: ${statsBlocked}
            
            **Board Health**: ${statsStale === 0 && statsBlocked === 0 ? '✅ Healthy' : '⚠️ Needs Attention'}
            
            *This is an automated maintenance report*`;
            
            // Create an issue for daily summary if there are concerns
            if (statsStale > 0 || statsBlocked > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Daily Board Maintenance - ${new Date().toISOString().split('T')[0]}`,
                body: summaryBody,
                labels: ['maintenance', 'automated']
              });
            }
      
      - name: Generate sprint progress report
        if: github.event_name == 'schedule' || github.event.inputs.action == 'update_sprint_progress'
        uses: actions/github-script@v7
        with:
          script: |
            // Get current sprint issues
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'current-sprint',
              per_page: 100
            });
            
            let totalIssues = issues.length;
            let completedIssues = 0;
            let inProgressIssues = 0;
            let blockedIssues = 0;
            
            for (const issue of issues) {
              const labels = issue.labels.map(l => l.name);
              
              if (labels.includes('done')) {
                completedIssues++;
              } else if (labels.includes('in-progress')) {
                inProgressIssues++;
              } else if (labels.includes('blocked')) {
                blockedIssues++;
              }
            }
            
            const completionRate = totalIssues > 0 ? Math.round((completedIssues / totalIssues) * 100) : 0;
            
            // Update repository description or create status file
            const reportContent = `# Sprint Progress Report
            
            **Generated**: ${new Date().toISOString()}
            **Total Issues**: ${totalIssues}
            **Completed**: ${completedIssues} (${completionRate}%)
            **In Progress**: ${inProgressIssues}
            **Blocked**: ${blockedIssues}
            
            **Sprint Health**: ${completionRate >= 80 ? '🟢 On Track' : completionRate >= 60 ? '🟡 At Risk' : '🔴 Behind'}
            `;
            
            console.log(reportContent);
  
  # Notification and Integration
  send_notifications:
    if: always()
    needs: [manage_issues, manage_pull_requests, daily_maintenance]
    runs-on: ubuntu-latest
    name: Send Notifications
    
    steps:
      - name: Send Slack notification for critical issues
        if: contains(github.event.issue.labels.*.name, 'P0') || contains(github.event.issue.labels.*.name, 'critical')
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 Critical Issue Alert",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Issue",
                  "value": "<${{ github.event.issue.html_url }}|#${{ github.event.issue.number }} - ${{ github.event.issue.title }}>",
                  "short": false
                }, {
                  "title": "Action Required",
                  "value": "Immediate attention needed",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update project metrics
        uses: actions/github-script@v7
        with:
          script: |
            // This would integrate with external analytics/reporting systems
            console.log('Project metrics updated');
            // Implementation would depend on your specific metrics platform